<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <env name="GAZEBO_MODEL_PATH" value="$(find fetch_gazebo)/models:$(optenv GAZEBO_MODEL_PATH)" />

  <!-- Gazebo world args -->
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>

  <!-- Task world args. These correspond to options in annotations.py -->

  <!-- OBJECT_NAME_OPTIONS -->
  <arg name="object_name" default="cube" />

  <!-- OBJECT_LOCATION_IDX -->
  <arg name="object_location_idx" default="0" />

  <!-- PICKUP_DISTRACTION_OPTIONS | PLACE_DISTRACTION_OPTIONS -->
  <arg name="pickup_distraction" default="none" />
  <arg name="place_distraction" default="none" />

  <!-- TODO: When we move to Melodic these arguments that are currently handled
  by a script should be removed in favour of $(eval ...) expressions -->
  <arg name="todo_pickup_none" default="true" />
  <arg name="todo_pickup_cluttered" default="false" />
  <arg name="todo_pickup_empty" default="false" />
  <arg name="todo_place_none" default="true" />
  <arg name="todo_place_cluttered" default="false" />

  <!-- Boolean Flags -->
  <arg name="door_blocked" default="false" />
  <arg name="door_block_invisible" default="false" />
  <arg name="base_stalled" default="false" />
  <arg name="hardware_failure" default="false" />

  <arg name="head_moved" default="false" />
  <arg name="base_moved_back" default="false" />
  <arg name="base_collided" default="false" />
  <arg name="incorrect_map" default="false" />

  <!-- Robot positions -->
  <arg name="initial_pose_x" default="0.0" />
  <arg name="initial_pose_y" default="0.0" />
  <arg name="initial_pose_a" default="0.0" />

  <!-- Set the simulation params -->
  <group ns="/bag_context">
    <param name="object_name" value="$(arg object_name)" />
    <param name="object_location_idx" value="$(arg object_location_idx)" />
    <param name="pickup_distraction" value="$(arg pickup_distraction)" />
    <param name="place_distraction" value="$(arg place_distraction)" />
    <param name="door_blocked" value="$(arg door_blocked)" />
    <param name="door_block_invisible" value="$(arg door_block_invisible)" />
    <param name="head_moved" value="$(arg head_moved)" />
    <param name="base_moved_back" value="$(arg base_moved_back)" />
    <param name="base_stalled" value="$(arg base_stalled)" />
    <param name="base_collided" value="$(arg base_collided)" />
    <param name="incorrect_map" value="$(arg incorrect_map)" />
    <param name="hardware_failure" value="$(arg hardware_failure)" />
    <param name="initial_pose_x" value="$(arg initial_pose_x)" />
    <param name="initial_pose_y" value="$(arg initial_pose_y)" />
    <param name="initial_pose_a" value="$(arg initial_pose_a)" />
  </group>

  <!-- Start Gazebo -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="world_name" value="$(find fetch_gazebo)/worlds/test_fault_zone.sdf"/>
  </include>

  <!-- Oh, you wanted a robot? -->
  <include file="$(find fetch_gazebo)/launch/include/fetch.launch.xml">
    <arg name="use_depth" value="true" unless="$(arg hardware_failure)" />
    <arg name="use_depth" value="false" if="$(arg hardware_failure)" />

    <!-- Randomize the location -->
    <arg name="x" value="$(arg initial_pose_x)" unless="$(arg incorrect_map)" />
    <arg name="y" value="$(arg initial_pose_y)" unless="$(arg incorrect_map)" />
    <arg name="yaw" value="$(arg initial_pose_a)" unless="$(arg incorrect_map)" />
  </include>

  <!-- If the pickup location must be cluttered, then clutter it up. TODO: With
  Melodic, remember to use eval -->
  <include file="$(find fetch_gazebo)/launch/include/faults/pickup_cluttered.launch" if="$(arg todo_pickup_cluttered)" />

  <!-- If the pickup location must be cluttered, then clutter it up TODO: With
  Melodic, remember to use eval -->
  <include file="$(find fetch_gazebo)/launch/include/faults/place_cluttered.launch" if="$(arg todo_place_cluttered)" />

  <!-- If the door must be blocked, then block it -->
  <include file="$(find fetch_gazebo)/launch/include/faults/door_blocked.launch" if="$(arg door_blocked)">
    <arg name="door_block_invisible" value="$(arg door_block_invisible)" />
  </include>

  <!-- If the base must be stalled, then spawn the stalling cube.
  TODO: With melodic, we can parameterize this -->
  <include file="$(find fetch_gazebo)/launch/include/faults/base_stall.launch" if="$(arg base_stalled)">
    <arg name="x" value="$(arg initial_pose_x)" />
    <arg name="y" value="$(arg initial_pose_y)" />
    <arg name="a" value="$(arg initial_pose_a)" />
  </include>

  <!-- Finally, spawn the objects to be picked up, unless the scene needs to be
  empty. TODO: Update the call with melodic -->
  <include file="$(find fetch_gazebo)/launch/include/faults/object_location_$(arg object_location_idx).launch" unless="$(arg todo_pickup_empty)">
    <arg name="object_name" value="$(arg object_name)" />
    <arg name="object_location_idx" value="$(arg object_location_idx" />
  </include>

  <!-- We also want to mess with the robot now and then -->
  <node name="look_away_server" pkg="fetch_gazebo" type="look_away.py" if="$(arg head_moved)" />
  <node name="move_back_server" pkg="fetch_gazebo" type="move_back.py" if="$(arg base_moved_back)" />
  <node name="collide_robot_server" pkg="fetch_gazebo" type="collide_robot.py" if="$(arg base_collided)" />

  <!-- (Mis)Localization -->
  <rosparam param="amcl" if="$(arg incorrect_map)">
    initial_pose_x: -3.25
    initial_pose_y: 8.05
    initial_pose_a: 1.57
  </rosparam>
  <group ns="amcl" unless="$(arg incorrect_map)">
    <param name="initial_pose_x" value="$(arg initial_pose_x)" />
    <param name="initial_pose_y" value="$(arg initial_pose_y)" />
    <param name="initial_pose_a" value="$(arg initial_pose_a)" />
  </group>

</launch>
